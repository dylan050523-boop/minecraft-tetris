package me.dylan.tetris;

import net.kyori.adventure.sound.Sound;
import org.apache.commons.lang.time.FastDateFormat;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.FishHook;
import org.bukkit.entity.Player;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Objects;                                                               

public class TetrisPiece {
    private static final String[] PIECE_NAMES = {"I", "small_I", "J", "L", "O", "S", "T", "Z"};

    // 블록 색상
    private static final Material[] PIECE_MATERIALS = {
            Material.RED_WOOL,      // I
            Material.PINK_WOOL, // small_I
            Material.ORANGE_WOOL,   // J
            Material.LIGHT_BLUE_WOOL, // L
            Material.YELLOW_WOOL,   // O
            Material.LIME_WOOL,     // S
            Material.PURPLE_WOOL,   // T
            Material.CYAN_WOOL     // Z
    };

    private static final Material GHOST_MATERIAL = Material.WHITE_STAINED_GLASS;


    // 테트리스 블록 좌표 정의 (HTML 코드 참고)
    private static final int[][][][] BLOCK_PLAYER_1 = {
            { // I
                    {
                            {-3, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {-5, -7, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    },
            },

            { // small I
                    {
                            {-3, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                    },

                    {
                            {-5, -7, -13}, {}, {}, {}, {}, {}, {}, {},
                    }

            },

            { // J
                    {
                            {-3, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {-1, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {-3, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {-1, -6, -13}, {}, {}, {}
                    },

                    {
                            {-4, -7, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {0, -9, -13}, {}, {}, {}
                    },

                    {
                            {-5, -11, -13}, {}, {}, {},
                            {-3, -7, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },
            },

            { // L

                    {
                            {-5, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {-1, -6, -13}, {}, {}, {}
                    },

                    {
                            {-3, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {-1, -10, -13}, {}, {}, {}
                    },

                    {
                            {-3, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {-3, -10, -13}, {}, {}, {}
                    },

                    {
                            {-3, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {-1, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },
            },

            { // O
                    {
                            {-4, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // S
                    {
                            {-4, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                            {-2, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {-4, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {-2, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // T
                    {
                            {-4, -6, -13}, {}, {}, {},
                            {-6, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {-4, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {-2, -8, -13}, {}, {}, {}
                    },

                    {
                            {-6, -7, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {-4, -9, -13}, {}, {}, {}
                    },

                    {
                            {-6, -8, -13}, {}, {}, {},
                            {-4, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // Z
                    {
                            {-4, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {-2, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {-4, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                            {-2, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            }
    };

    private static final int[][][][] BLOCK_PLAYER_2 = {
            { // I
                    {
                            {45, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {},
                    },

                    {
                            {43, -7, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {},
                    },
            },

            { // small I
                    {
                            {45, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {43, -7, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // J
                    {
                            {44, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {46, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {44, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {46, -6, -13}, {}, {}, {}
                    },

                    {
                            {42, -7, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {46, -9, -13}, {}, {}, {}
                    },

                    {
                            {42, -12, -13}, {}, {}, {},
                            {44, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },
            },

            { // L

                    {
                            {42, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {46, -6, -13}, {}, {}, {}
                    },

                    {
                            {44, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {46, -10, -13}, {}, {}, {}
                    },

                    {
                            {42, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {42, -10, -13}, {}, {}, {}
                    },

                    {
                            {42, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {44, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },
            },

            { // O
                    {
                            {43, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // S
                    {
                            {43, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                            {45, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {43, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {45, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // T
                    {
                            {43, -6, -13}, {}, {}, {},
                            {41, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {43, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {45, -8, -13}, {}, {}, {}
                    },

                    {
                            {41, -7, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {43, -9, -13}, {}, {}, {}
                    },

                    {
                            {41, -8, -13}, {}, {}, {},
                            {43, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // Z
                    {
                            {43, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {45, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {43, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                            {45, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            }
    };

    private static final int[][][][] BLOCK_PLAYER_3 = {
            { // I
                    {
                            {92, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {90, -7, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // small I
                    {
                            {92, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                    },

                    {
                            {90, -7, -13}, {}, {}, {}, {}, {}, {}, {},
                    }
            },

            { // J
                    {
                            {91, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {93, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                    },

                    {
                            {91, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {93, -6, -13}, {}, {}, {}
                    },

                    {
                            {89, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {93, -10, -13}, {}, {}, {}
                    },

                    {
                            {89, -12, -13}, {}, {}, {},
                            {91, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // L
                    {
                            {89, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {93, -6, -13}, {}, {}, {}
                    },

                    {
                            {91, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {93, -10, -13}, {}, {}, {}
                    },

                    {
                            {89, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {89, -10, -13}, {}, {}, {}
                    },

                    {
                            {89, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {91, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // O
                    {
                            {90, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // S
                    {
                            {90, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                            {92, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {90, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {92, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // T
                    {
                            {90, -6, -13}, {}, {}, {},
                            {88, -8, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {90, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {92, -8, -13}, {}, {}, {}
                    },

                    {
                            {88, -7, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {90, -9, -13}, {}, {}, {}
                    },

                    {
                            {88, -8, -13}, {}, {}, {},
                            {90, -6, -13}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // Z
                    {
                            {90, -6, -13}, {}, {}, {}, {}, {}, {}, {},
                            {92, -8, -13}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {90, -8, -13}, {}, {}, {}, {}, {}, {}, {},
                            {92, -6, -13}, {}, {}, {}, {}, {}, {}, {}
                    }
            }
    };

    private static final int[][][][] BLOCK_PLAYER_4 = {
            { // I
                    {
                            {22, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {20, 58, -17}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // small I
                    {
                            {22, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                    },

                    {
                            {20, 58, -17}, {}, {}, {}, {}, {}, {}, {},
                    }
            },

            { // J
                    {
                            {21, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {23, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {21, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {23, 59, -17}, {}, {}, {}
                    },

                    {
                            {19, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {23, 55, -17}, {}, {}, {}
                    },

                    {
                            {19, 53, -17}, {}, {}, {},
                            {21, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // L
                    {
                            {19, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {23, 59, -17}, {}, {}, {}
                    },

                    {
                            {21, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {23, 55, -17}, {}, {}, {}
                    },

                    {
                            {19, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {19, 55, -17}, {}, {}, {}
                    },

                    {
                            {19, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {21, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // O
                    {
                            {20, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // S
                    {
                            {20, 57, -17}, {}, {}, {}, {}, {}, {}, {},
                            {22, 59, -17}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {20, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {22, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // T
                    {
                            {20, 59, -17}, {}, {}, {},
                            {18, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {20, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {22, 57, -17}, {}, {}, {}
                    },

                    {
                            {18, 58, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {20, 56, -17}, {}, {}, {}
                    },

                    {
                            {18, 57, -17}, {}, {}, {},
                            {20, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // Z
                    {
                            {20, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {22, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {20, 57, -17}, {}, {}, {}, {}, {}, {}, {},
                            {22, 59, -17}, {}, {}, {}, {}, {}, {}, {}
                    }
            }
    };

    private static final int[][][][] BLOCK_PLAYER_5 = {
            { // I
                    {
                            {68, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {66, 58, -17}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // small_i
                    {
                            {68, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                    },

                    {
                            {66, 58, -17}, {}, {}, {}, {}, {}, {}, {},
                    }
            },

            { // J
                    {
                            {67, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {69, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {67, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {69, 59, -17}, {}, {}, {}
                    },

                    {
                            {65, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {69, 55, -17}, {}, {}, {}
                    },

                    {
                            {65, 53, -17}, {}, {}, {},
                            {67, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // L
                    {
                            {65, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {69, 59, -17}, {}, {}, {}
                    },

                    {
                            {67, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {69, 55, -17}, {}, {}, {}
                    },

                    {
                            {65, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {65, 55, -17}, {}, {}, {}
                    },

                    {
                            {65, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {67, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // O
                    {
                            {66, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // S
                    {
                            {66, 57, -17}, {}, {}, {}, {}, {}, {}, {},
                            {68, 59, -17}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {66, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {68, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // T
                    {
                            {66, 59, -17}, {}, {}, {},
                            {64, 57, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {66, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {68, 57, -17}, {}, {}, {}
                    },

                    {
                            {64, 58, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                            {66, 56, -17}, {}, {}, {}
                    },

                    {
                            {64, 57, -17}, {}, {}, {},
                            {66, 59, -17}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}
                    }
            },

            { // Z
                    {
                            {66, 59, -17}, {}, {}, {}, {}, {}, {}, {},
                            {68, 57, -17}, {}, {}, {}, {}, {}, {}, {}
                    },

                    {
                            {66, 57, -17}, {}, {}, {}, {}, {}, {}, {},
                            {68, 59, -17}, {}, {}, {}, {}, {}, {}, {}
                    }
            }
    };

//    "I", "small_I", "J", "L", "O", "S", "T", "Z"
    private static final int[][][] UPCOMING_BLOCKS_1 = {
        {
//                I 블록
                {-21, -39, -11},
                {-20, -39, -11},
                {-19, -39, -11},
                {-18, -39, -11},
        },

        {
//                small I 블록
                {-21, -39, -11},
                {-20, -39, -11},
                {-19, -39, -11},
                {-18, -39, -11},
        },

        {
//                J 블록
                {-20, -38, -11},
                {-20, -39, -11},
                {-19, -39, -11},
                {-18, -39, -11}
        },

        {
//                L 블록
                {-18, -38, -11},
                {-18, -39, -11},
                {-19, -39, -11},
                {-20, -39, -11},
        },

        {
//            O블록
                {-19, -38, -11},
                {-18, -38, -11},
                {-19, -39, -11},
                {-18, -39, -11},
        },

        {
//            S블록
                {-19, -38, -11},
                {-18, -38, -11},
                {-19, -39, -11},
                {-20, -39, -11},
        },

        {
//            T블록
                {-19, -38, -11},
                {-20, -39, -11},
                {-19, -39, -11},
                {-18, -39, -11}
        },

        {
//            Z블록
                {-20, -38, -11},
                {-19, -38, -11},
                {-19, -39, -11},
                {-18, -39, -11},
        }
    };

    private static final int[][][] UPCOMING_BLOCKS_2 = {
            {
                    {26, -39, -11},
                    {27, -39, -11},
                    {28, -39, -11},
                    {29, -39, -11}
            },

            {
                    {26, -39, -11},
                    {27, -39, -11},
                    {28, -39, -11},
                    {29, -39, -11}
            },

            {
                    {27, -39, -11},
                    {27, -40, -11},
                    {28, -40, -11},
                    {29, -40, -11}
            },

            {
                    {29, -39, -11},
                    {29, -40, -11},
                    {28, -40, -11},
                    {27, -40, -11}
            },

            {
                    {27, -39, -11},
                    {28, -39, -11},
                    {27, -40, -11},
                    {28, -40, -11}
            },

            {
                    {28, -39, -11},
                    {29, -39, -11},
                    {27, -40, -11},
                    {28, -40, -11}
            },

            {
                    {28, -39, -11},
                    {27, -40, -11},
                    {28, -40, -11},
                    {29, -40, -11}
            },

            {
                    {27, -39, -11},
                    {28, -39, -11},
                    {28, -40, -11},
                    {29, -40, -11}
            },
    };

    private static final int[][][] UPCOMING_BLOCKS_3 = {
            {
                    {73, -39, -11},
                    {74, -39, -11},
                    {75, -39, -11},
                    {76, -39, -11}
            },

            {
                    {73, -39, -11},
                    {74, -39, -11},
                    {75, -39, -11},
                    {76, -39, -11}
            },

            {
                    {74, -39, -11},
                    {74, -40, -11},
                    {75, -40, -11},
                    {76, -40, -11}
            },

            {
                    {76, -39, -11},
                    {76, -40, -11},
                    {75, -40, -11},
                    {74, -40, -11}
            },

            {
                    {74, -39, -11},
                    {75, -39, -11},
                    {74, -40, -11},
                    {75, -40, -11}
            },

            {
                    {75, -39, -11},
                    {76, -39, -11},
                    {74, -40, -11},
                    {75, -40, -11}
            },

            {
                    {75, -39, -11},
                    {74, -40, -11},
                    {75, -40, -11},
                    {76, -40, -11}
            },

            {
                    {74, -39, -11},
                    {75, -39, -11},
                    {75, -40, -11},
                    {76, -40, -11}
            }
    };

    private static final int[][][] UPCOMING_BLOCKS_4 = {
            {
                    {3, 27, -15},
                    {4, 27, -15},
                    {5, 27, -15},
                    {6, 27, -15}
            },

            {
                    {3, 27, -15},
                    {4, 27, -15},
                    {5, 27, -15},
                    {6, 27, -15}
            },

            {
                    {4, 27, -15},
                    {4, 26, -15},
                    {5, 26, -15},
                    {6, 26, -15}
            },

            {
                    {4, 26, -15},
                    {5, 26, -15},
                    {6, 26, -15},
                    {6, 27, -15}
            },

            {
                    {4, 27, -15},
                    {5, 27, -15},
                    {4, 28, -15},
                    {5, 28, -15}
            },

            {
                    {4, 26, -15},
                    {5, 26, -15},
                    {5, 27, -15},
                    {6, 27, -15}
            },

            {
                    {5, 27, -15},
                    {4, 26, -15},
                    {5, 26, -15},
                    {6, 26, -15}
            },

            {
                    {4, 27, -15},
                    {5, 27, -15},
                    {5, 26, -15},
                    {6, 26, -15}
            }
    };

    private static final int[][][] UPCOMING_BLOCKS_5 = {
            {
                    {49, 27, -15},
                    {50, 27, -15},
                    {51, 27, -15},
                    {52, 27, -15}
            },

            {
                    {49, 27, -15},
                    {50, 27, -15},
                    {51, 27, -15},
                    {52, 27, -15}
            },

            {
                    {50, 27, -15},
                    {50, 26, -15},
                    {51, 26, -15},
                    {52, 26, -15}
            },

            {
                    {50, 26, -15},
                    {51, 26, -15},
                    {52, 26, -15},
                    {52, 27, -15}
            },

            {
                    {50, 27, -15},
                    {51, 27, -15},
                    {50, 26, -15},
                    {51, 26, -15}
            },

            {
                    {50, 26, -15},
                    {51, 26, -15},
                    {51, 27, -15},
                    {52, 27, -15}
            },

            {
                    {51, 27, -15},
                    {50, 26, -15},
                    {51, 26, -15},
                    {52, 26, -15}
            },

            {
                    {50, 27, -15},
                    {51, 27, -15},
                    {51, 26, -15},
                    {52, 26, -15}
            }

    };

    private static final int[][][] HOLDING_BLOCKS = {
            {
//                I 블록
                    {-21, -34, -12},
                    {-20, -34, -12},
                    {-19, -34, -12},
                    {-18, -34, -12}
            },

            {
//                small I 블록
                    {-21, -34, -12},
                    {-20, -34, -12},
                    {-19, -34, -12},
                    {-18, -34, -12}
            },

            {
//                J 블록
                    {-20, -33, -12},
                    {-20, -34, -12},
                    {-19, -34, -12},
                    {-18, -34, -12}
            },

            {
//                L 블록
                    {-20, -34, -12},
                    {-19, -34, -12},
                    {-18, -34, -12},
                    {-18, -33, -12}
            },

            {
//                O 블록
                    {-19, -33, -12},
                    {-18, -33, -12},
                    {-19, -34, -12},
                    {-18, -34, -12}
            },

            {
//            S블록
                    {-20, -33, -12},
                    {-19, -33, -12},
                    {-19, -34, -12},
                    {-18, -34, -12}
            },

            {
//            T블록
                    {-19, -33, -12},
                    {-20, -34, -12},
                    {-19, -34, -12},
                    {-18, -34, -12}
            },

            {
//            Z블록
                    {-20, -34, -12},
                    {-19, -34, -12},
                    {-19, -33, -12},
                    {-18, -33, -12}
            }
    };


    private final Player player;
    private final World world;

    public int pieceType;
    private int rotation;
    private int offsetX;
    public int offsetY;
    private boolean isLocked;
    private final TetrisBoard board;
    public int ghostOffsetY = 0;
    public boolean isHolding;
    public int playerNumber;
    public int heldBlock = -1;
    public int cube = -1;
    public int index = 0;

    public TetrisPiece(int pieceType, int playerNumber, Player player, TetrisBoard board) { // TetrisGame으로부터 전달받음
        this.pieceType = pieceType;
        this.player = player;
        this.playerNumber = playerNumber;
        this.world = player.getWorld();
        this.board = board;
        this.offsetX = 0;
        this.offsetY = 0;
        this.ghostOffsetY = 0;
        this.isLocked = false;
        this.isHolding = false;

        player.sendMessage("\n test 1 - generate piece coord\n");
        player.sendMessage("order: " + this.playerNumber);

        for (int i = 0; i < BLOCK_PLAYER_1[pieceType].length; i++) {
            rotation = i;
            generateCoordinationPoints();
        }
        drawPiece();
//        drawGhostPiece();
    }

    public void addCoord(int row, int column) { //, int x, int y, int z) {
        switch(playerNumber) {
            case 1 :
                int x1 = BLOCK_PLAYER_1[pieceType][rotation][index][0], y1 = BLOCK_PLAYER_1[pieceType][rotation][index][1];
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        BLOCK_PLAYER_1[pieceType][rotation][index] = new int[] {x1 + i, y1 - j, -13};
                        index += 1;
                    }
                }
                break;

            case 2 :
                int x2 = BLOCK_PLAYER_2[pieceType][rotation][index][0], y2 = BLOCK_PLAYER_2[pieceType][rotation][index][1];
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        BLOCK_PLAYER_2[pieceType][rotation][index] = new int[] {x2 + i, y2 - j, -13};
                        index += 1;
                    }
                }
                break;

            case 3 :
                int x3 = BLOCK_PLAYER_3[pieceType][rotation][index][0], y3 = BLOCK_PLAYER_3[pieceType][rotation][index][1];
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        BLOCK_PLAYER_3[pieceType][rotation][index] = new int[] {x3 + i, y3 - j, -13};
                        index += 1;
                    }
                }
                break;

            case 4 :
                int x4 = BLOCK_PLAYER_4[pieceType][rotation][index][0], y4 = BLOCK_PLAYER_4[pieceType][rotation][index][1];
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        BLOCK_PLAYER_4[pieceType][rotation][index] = new int[] {x4 + i, y4 - j, -17};
                        index += 1;
                    }
                }
                break;

            case 5 :
                int x5 = BLOCK_PLAYER_5[pieceType][rotation][index][0], y5 = BLOCK_PLAYER_5[pieceType][rotation][index][1];
                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < column; j++) {
                        BLOCK_PLAYER_5[pieceType][rotation][index] = new int[] {x5 + i, y5 - j, -17};
                        index += 1;
                    }
                }
                break;
        }
    }


    public void generateCoordinationPoints() {
        switch(pieceType) {
            case 0 :
                switch(rotation) {
                    case 0 : // 세로
                        addCoord(2, 8);
                        break;

                    case 1 : // 가로
                        addCoord(8, 2);
                        break;
                }
                break;

            case 1 :
                switch(rotation) {
                    case 0 :
                        addCoord(1, 8);
                        break;

                    case 1 :
                        addCoord(8, 1);
                        break;
                }
                break;

            case 2 :
                switch(rotation) {
                    case 0 :
                        addCoord(2, 4);
                        addCoord(4, 2);
                        break;

                    case 1 :
                        addCoord(2, 6);
                        addCoord(2, 2);
                        break;

                    case 2 :
                        addCoord(6, 2);
                        addCoord(2, 2);
                        break;

                    case 3 :
                        addCoord(2, 2);
                        addCoord(2, 6);
                        break;
                }
                break;

            case 3 :
                switch(rotation) {
                    case 0 :
                        addCoord(6, 2);
                        addCoord(2, 2);
                        break;

                    case 1 :
                        addCoord(2, 6);
                        addCoord(2, 2);
                        break;

                    case 2 :
                        addCoord(6, 2);
                        addCoord(2, 2);
                        break;

                    case 3 :
                        addCoord(4, 2);
                        addCoord(2, 4);
                        break;
                }
                break;

            case 4 :
                addCoord(4, 4);
                break;

            case 5, 7:
                switch(rotation) {
                    case 0 :
                        addCoord(4, 2);
                        addCoord(4, 2);
                        break;

                    case 1 :
                        addCoord(2, 4);
                        addCoord(2, 4);
                        break;
                }
                break;

            case 6 :
                switch(rotation) {
                    case 0 :
                        addCoord(2, 2);
                        addCoord(6, 2);
                        break;

                    case 1 :
                        addCoord(2, 6);
                        addCoord(2, 2);
                        break;

                    case 2 :
                        addCoord(6, 2);
                        addCoord(2, 2);
                        break;

                    case 3 :
                        addCoord(2, 2);
                        addCoord(2, 6);
                        break;
                }
                break;

        }
        index = 0;
    }

    public void drawUpcomingBlocks(int playerNumber, int[] upcomingPieces) {
        int newOffsetY = 0;

        for (int i = 0; i < upcomingPieces.length; i++) {
            int blockNumber = upcomingPieces[i];
            int[][] c = switch (playerNumber) {
                case 1 -> UPCOMING_BLOCKS_1[blockNumber];
                case 2 -> UPCOMING_BLOCKS_2[blockNumber];
                case 3 -> UPCOMING_BLOCKS_3[blockNumber];
                case 4 -> UPCOMING_BLOCKS_4[blockNumber];
                case 5 -> UPCOMING_BLOCKS_5[blockNumber];
                default -> null;
            };

            Material blockType = PIECE_MATERIALS[blockNumber];
            for (int[] coord : Objects.requireNonNull(c)) {
                int x = coord[0];
                int y = coord[1] + newOffsetY;
                int z = coord[2];
                Block block = world.getBlockAt(x, y, z);
                block.setType(blockType);
            }
            newOffsetY -= 4;
        }
    }

    public void clearUpcomingBlocks() {
        for (int i = -38; i > -59; i--) {
            for (int j = -21; j < -17; j++) {
                Block block = world.getBlockAt(j, i, -11);
                block.setType(Material.AIR);
            }

            for (int j = 26; j < 30; j++) {
                Block block = world.getBlockAt(j, i, -11);
                block.setType(Material.AIR);
            }

            for (int j = 73; j < 77; j++) {
                Block block = world.getBlockAt(j, i, -11);
                block.setType(Material.AIR);
            }
        }

        for (int i = 28; i > 4; i--) {
            for (int j = 3; j < 7; j++) {
                Block block = world.getBlockAt(j, i, -15);
                block.setType(Material.AIR);
            }

            for (int j = 49; j < 53; j++) {
                Block block = world.getBlockAt(j, i, -15);
                block.setType(Material.AIR);
            }
        }
    }

    public void drawGhostPiece() {
//        그냥 블록이 떨어져서 위치할 곳에 유리블럭 생성하면 끝
        ghostOffsetY = 0; // 핵심
        int[][] coordinates = getCurrentBlockCoordinates(pieceType, rotation)[playerNumber - 1];
        while (!checkCollision(rotation, ghostOffsetY)) {
            ghostOffsetY -= 1;
        }
        ghostOffsetY += 1;

        for (int[] coord : coordinates) {
            int X = coord[0] + offsetX;
            int Y = coord[1] + ghostOffsetY;
            int Z = coord[2];

            Block block = world.getBlockAt(X, Y, Z);
            block.setType(GHOST_MATERIAL);
        }
    }

    public void drawPiece() {
        if (isLocked) {
            return;
        }

        rotation = 0;

        int[][] coordination = getCurrentBlockCoordinates(pieceType, rotation)[playerNumber - 1];

        for (int[] coord: coordination) {
            int worldX = coord[0] + offsetX;
            int worldY = coord[1] + offsetY;
            int worldZ = coord[2];

            Block block = world.getBlockAt(worldX, worldY, worldZ);
            block.setType(PIECE_MATERIALS[pieceType]);
        }
    }

    public void clearPiece(int _offsetY) {
        if (isLocked) return;

        int[][] coordinates = getCurrentBlockCoordinates(pieceType, rotation)[playerNumber - 1];

        for (int[] coord : coordinates) {
            int x = coord[0] + offsetX;
            int y = coord[1] + _offsetY;
            int z = coord[2];

            Block block = world.getBlockAt(x, y, z);
            block.setType(Material.AIR);
        }
    }

    private int[][][] getCurrentBlockCoordinates(int type, int newRotation) {
//        if (type >= BLOCK_PLAYER_1.length || newRotation >= BLOCK_PLAYER_1[pieceType].length) {
//        int t = type, r = newRotation;
//        switch(playerNumber) {
//            c
//        }
//        if (type >= BLOCK_PLAYER_2.length || newRotation >= BLOCK_PLAYER_2[pieceType].length) {
////            player.playSound(Sound.);
//            player.sendMessage("§c오류: 유효하지 않은 블록 타입 또는 회전 상태입니다.");
////            return new int[0][0];
//            t = 0;
//            r = 0;
////            return BLOCK_PLAYER_2[0][0];
//        }
        return
                new int[][][]{
                        BLOCK_PLAYER_1[type][newRotation],
                        BLOCK_PLAYER_2[type][newRotation],
                        BLOCK_PLAYER_3[type][newRotation],
                        BLOCK_PLAYER_4[type][newRotation],
                        BLOCK_PLAYER_5[type][newRotation]
                };
    }

    // 블록 아래로 이동
    public boolean moveDown() {
        if (isLocked) {
            return false;
        }
        ghostOffsetY = 0;
        // 이전 위치 블록 지우기
        clearPiece(offsetY);
//        clearPiece(ghostOffsetY);

        // Y 좌표 감소 시도 (마인크래프트에서 Y는 높이)
        offsetY -= 1;

        // 충돌 확인
        if (checkCollision(rotation, offsetY)) {
            // 충돌 시 이전 위치로 돌아가기
            offsetY += 1;
            // 블록 다시 그리기
//            drawGhostPiece();
            drawPiece();
            lock();
            return false;
        }

        // 새 위치에 블록 그리기
//        drawGhostPiece();
        drawPiece();
        return true;
    }

    public boolean moveLeft() {
        if (isLocked) {
            return false;
        }

//        이전 위치 블록 지우기
//        clearGhostPiece();
//        clearPiece(offsetY);
//        clearPiece(ghostOffsetY);

//        X 좌표 증가 시도
        /*
         * 왼쪽: -X, 오른쪽: +X
         * */
        offsetX -= 1;

//        충돌 확인
        if (checkCollision(rotation, offsetY)) {
            offsetX += 1;
//            drawGhostPiece();
//            drawPiece();
            return false;
        }

//        새 위치에 블록 그리기
//        drawGhostPiece();
//        drawPiece();
        return true;
    }

    public boolean moveRight() {
//        보드 초기화
        if (isLocked) {
            return false;
        }

//        clearPiece(offsetY);
//        clearPiece(ghostOffsetY);
//        이동
        offsetX += 1;

//        충돌체크
        if (checkCollision(rotation, offsetY)) {
            offsetX -= 1;
//            drawGhostPiece();
//            drawPiece();
            return false;
        }

//        drawGhostPiece();
//        drawPiece();
        return true;
    }

    public void rotate() {
        if (isLocked) return;

//        clearPiece(offsetY);
//        clearPiece(ghostOffsetY);
        player.sendMessage(PIECE_NAMES[this.pieceType] + "블록 회전");
        // 회전 후 충돌 확인
//        int newRotation = (rotation + 1) % BLOCK_PLAYER_1[pieceType].length;
        int newRotation = (rotation + 1) % BLOCK_PLAYER_2[pieceType].length;
        if (!checkCollision(newRotation, offsetY)) {
            rotation = newRotation;
//            drawPiece();
//            drawGhostPiece();
            return;
        }
//        drawGhostPiece();
//        drawPiece();
    }

    public void hardDrop() {
        if (isLocked) return;

//        clearPiece(offsetY);
//        clearPiece(ghostOffsetY);

        while (!checkCollision(rotation, offsetY)) {
            offsetY -= 1;
        }

        offsetY += 1;
//        drawPiece();
//        player.sendMessage("hardDrop() lock()");
//        lock();
    }

    public boolean checkCollision(int newRotation, int _offsetY) {
//        player.sendMessage("\n test 2 - checkCollision() test\n");
//        player.sendMessage("tetrisPiece -> checkCollision() -> playerNumber: " + playerNumber);
//        player.sendMessage("player: " + player);
        boolean isCollision = false;
        int[][] currentShape = getCurrentBlockCoordinates(pieceType, newRotation)[playerNumber - 1];

        for (int[] coord : currentShape) {
            int x = coord[0] + offsetX;
            int y = coord[1] + _offsetY;
            int z = coord[2];

            switch(playerNumber) {
                case 0 :
                    if (y < -52 || x < -16 || x > 11) {
                        isCollision = true;
                    }
                    break;

                case 1 :
                    if (y < -52 || x < 31 || x > 58) {
                        isCollision = true;
                    }
                    break;

                case 2 :
                    if (y < -52 || x < 78 || x > 105) {
                        isCollision = true;
                    }
                    break;

                case 3 :
                    if (y < 13 || x < 8 || x > 35) {
                        isCollision = true;
                    }
                    break;

                case 4 :
                    if (y < 13 || x < 54 || x > 81) {
                        isCollision = true;
                    }
                    break;
            }

            if (board.hasBlockAt(x, y, z)) {
                isCollision = true;
            }
        }
        return isCollision;
    }

    public void lock() {
        if (isLocked) {
            return;
        }

        this.isLocked = true;

//        현재 블록을 보드에 기록
//        int[][] coordinates = getCurrentBlockCoordinates(pieceType, rotation);
//        player.sendMessage("locking block...");
//        for (int[] coord: coordinates) {
//            int x = coord[0] + offsetX;
//            int y = coord[1] + offsetY;
//            int z = coord[2];
//
////            player.sendMessage("x: " + x + " y" + y + " z" + z);
//
//            board.addLockedBlock(x, y, z, PIECE_MATERIALS[pieceType]);
//        }
//        player.sendMessage(PIECE_NAMES[pieceType] + " 블록이 고정되었습니다.");
    }

    // getter 메서드들
    public int getPieceType() {
        return pieceType;
    }

    public int getRotation() {
        return rotation;
    }

    public boolean isLocked() {
        return isLocked;
    }

    public String getPieceName() {
        return PIECE_NAMES[pieceType];
    }

    // 홀딩된 블록 표시 메서드 추가
    public void drawHoldingPiece(int pieceType, int playerNumber) {
        // 홀딩 상자의 블록들 제거

        switch (playerNumber) {
            case 0 :
                for (int i = -35; i < -32; i++) {
                    for (int j = -22; j < -17; j++) {
                        Block block = world.getBlockAt(j, i, -12);
                        block.setType(Material.AIR);
                    }
                }
                break;

            case 1 :
                break;

            case 2 :
                break;

            case 3 :
                break;

            case 4 :
                break;
        }
        
        // 홀딩된 블록 표시
        int[][] cubeCoord = HOLDING_BLOCKS[pieceType];
        for (int[] coord : cubeCoord) {
            int x = coord[0];
            int y = coord[1];
            int z = coord[2];

            Block block = world.getBlockAt(x, y, z);
            block.setType(PIECE_MATERIALS[pieceType]);
        }
    }
}
